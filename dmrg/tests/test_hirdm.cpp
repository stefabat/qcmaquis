/**
 * @file
 * @copyright This code is licensed under the 3-clause BSD license.
 *            Copyright ETH Zurich, Laboratory of Physical Chemistry, Reiher Group.
 *            See LICENSE.txt for details.
 */

#define BOOST_TEST_MAIN

#include <boost/test/included/unit_test.hpp>
#include <boost/filesystem/operations.hpp>
#include "utils/fpcomparison.h"
#include "utils/io.hpp" // has to be first include because of impi
#include <iostream>

#include "maquis_dmrg.h"
#include "test_detail.h"
// Test 1: H2 with d=3 Angstrom,singlet,cc-pVDZ basis set,CAS(2,2),integrals generated by MOLCAS
BOOST_AUTO_TEST_CASE( Test_HiRDM )
{
    typedef maquis::DMRGInterface<double>::meas_with_results_type rdm_measurement;

    DmrgParameters p;
    // // Integrals can be alternatively defined like this (as the FCIDUMP file without header)
    //
    const std::string integrals(
     "    1.63719990472             1     1     1     1\n"
     "  -0.144746632369             1     1     2     1\n"
     "   0.266282775636E-01         2     1     2     1\n"
     "   0.167531821030E-01         2     2     2     1\n"
     "   0.459207160088             1     1     2     2\n"
     "   0.533052674812             2     2     2     2\n"
     "   -0.230673683229E-01        1     1     3     1\n"
     "   0.873924303638E-02         2     1     3     1\n"
     "   0.212121998644E-01         2     2     3     1\n"
     "   0.517422983458E-02         3     1     3     1\n"
     "   0.166602690956E-01         3     2     3     1\n"
     "   0.201358122600E-01         3     3     3     1\n"
     "   0.113600263329             1     1     3     2\n"
     "   0.130338872974E-01         2     1     3     2\n"
     "   0.170776682916             2     2     3     2\n"
     "   0.130799970176             3     2     3     2\n"
     "   0.156301172407             3     3     3     2\n"
     "   0.386363318135             1     1     3     3\n"
     "   0.177101856628E-01         2     1     3     3\n"
     "   0.469384865605             2     2     3     3\n"
     "   0.439202823493             3     3     3     3\n"
     "   -4.96687194130             1     1     0     0\n"
     "   0.128261636279             2     1     0     0\n"
     "   -1.74403215804             2     2     0     0\n"
     "   -0.589618128664E-02        3     1     0     0\n"
     "   -0.377341184513            3     2     0     0\n"
     "   -1.09420984374             3     3     0     0\n"
     "   1.58753163271              0     0     0     0\n");


    p.set("integrals",integrals);


    p.set("site_types","0,0,0");
    p.set("L",3);
    p.set("irrep",0);

    p.set("nsweeps",2);
    p.set("max_bond_dimension",100);

    // for SU2U1
    p.set("nelec",4);
    p.set("spin",0);

    // for 2U1

    p.set("u1_total_charge1",2);
    p.set("u1_total_charge2",2);

    // Measure 4-RDM
    p.set("MEASURE[4rdm]",1);
    // Measure 3-RDM
    p.set("MEASURE[3rdm]",1);
    // This is an expensive test,so we will run it only for one symmetry.
    // For SU2U1, the measurement is performed in 2U1 anyway
    std::vector<std::string> symmetries;
    #ifdef HAVE_SU2U1PG
    symmetries.push_back("su2u1pg");
    #endif

    test_detail::TestTmpPath tmp_path;

    for (auto&& s: symmetries)
    {
        maquis::cout << "Running test for symmetry " << s << std::endl;
        p.set("symmetry",s);

         // ground state calculation
        p.set("n_ortho_states", 0); // needed only because before n_ortho_states is set to 1
        p.set("ortho_states", "");

        // set checkpoint name for S0
        std::string checkpoint_name = "checkpoint_" + s;
        boost::filesystem::path checkpoint_path(tmp_path.path() / checkpoint_name);
        p.set("chkpfile", checkpoint_path.c_str());

        // ground state calculation
        {
            maquis::DMRGInterface<double> interface(p);
            interface.optimize();

            BOOST_CHECK_CLOSE(interface.energy(),-7.8986766891097169 ,1e-7);

            // 4-RDM
            const rdm_measurement& meas = interface.fourrdm();

            double value = 0.0;

            const rdm_measurement ref_4rdm = {
                { {2,2,0,0,2,1,0,0}, {2,1,0,0,1,2,0,0}, {2,2,0,0,2,2,0,0}, {2,2,0,0,2,0,1,1}, {2,2,0,0,1,1,0,0}, {2,1,0,0,2,1,0,0},
                {2,1,0,0,1,1,0,0}, {2,2,0,0,2,1,1,0}, {2,1,0,0,0,0,2,1}, {2,2,1,0,2,2,0,0}, {2,2,1,0,2,2,0,1}, {2,2,1,0,2,1,0,0},
                {2,2,1,0,2,2,1,0}, {2,2,1,0,2,0,1,1}, {1,1,0,0,1,1,0,0}, {2,2,1,0,1,1,0,0}, {2,2,1,0,1,1,0,2}, {2,2,1,0,1,1,2,0},
                {2,2,1,0,0,0,2,1}, {2,2,1,0,0,0,1,2}, {2,1,1,0,1,2,0,1}, {2,1,1,0,1,1,0,0}, {2,1,1,0,1,2,0,0}, {2,1,1,0,2,1,0,0},
                {2,2,1,0,1,0,2,2}, {2,1,1,0,0,2,1,0}, {2,1,1,0,0,2,1,1}, {2,1,1,0,2,0,1,1}, {2,2,1,1,2,2,1,0}, {2,2,1,1,2,2,0,0},
                {2,2,1,1,1,1,0,0}, {2,2,1,1,2,1,0,0}, {2,2,1,1,2,1,1,0}, {2,2,1,1,2,0,1,1}, {2,2,1,1,2,2,1,1}},
                std::vector<double>{
                0.010620881028385543, 0.0015951837443312169, 0.07071480901180624, 0.00032592464529959745, -0.52689210303450595, 0.0015951837443312169,
                -0.079135592944768476, -0.00016296232264979873, 0.0015951837443312169, -0.0029538362361081765, 0.00012338502545186831, -0.00044364601530354545,
                0.00012338502545186831, -1.3614234995189234e-05, 3.9258437110927495, 0.022008869262486793, -1.3614234995189234e-05, -1.3614234995189234e-05,
                -0.00044364601530354545, -0.00044364601530354545, 1.5021871075962781e-06, 0.0012142231888373587, -2.4475827130975116e-05, -2.4475827130975116e-05,
                0.00012338502545186831, 4.8951654261950233e-05, -7.5109355379813904e-07, -7.5109355379813904e-07, -1.2848614773863522e-05, 0.00030759570510149176,
                -0.0022918784652058983, 4.6198772709403401e-05, -7.0885449937470282e-07, 1.4177089987494056e-06, 1.3379816635167232e-06}
                };
            test_detail::check_measurement_mat(meas, ref_4rdm);

            // 3-RDM
            const rdm_measurement& meas3 = interface.threerdm();

            const rdm_measurement ref_3rdm = {
            {{0, 0, 1, 0, 1, 0}, {0, 0, 1, 0, 1, 2}, {0, 0, 1, 0, 1, 1}, {0, 0, 1, 0, 2, 2}, {0, 0, 1, 0, 2, 1}, {0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 2, 0},
                {0, 0, 1, 0, 0, 2}, {0, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 2, 1}, {0, 0, 1, 1, 1, 2}, {0, 0, 1, 1, 0, 1}, {0, 0, 1, 1, 2, 2}, {0, 0, 1, 1, 0, 2},
                {0, 0, 1, 2, 0, 0}, {0, 0, 1, 2, 0, 1}, {0, 0, 1, 2, 1, 2}, {0, 0, 1, 2, 1, 1}, {0, 0, 1, 2, 0, 2}, {0, 0, 2, 0, 1, 0}, {0, 0, 2, 0, 0, 1},
                {0, 0, 2, 0, 0, 2}, {0, 0, 2, 0, 1, 1}, {0, 0, 2, 0, 1, 2}, {0, 0, 2, 1, 0, 0}, {0, 0, 2, 0, 2, 2}, {0, 0, 2, 0, 2, 0}, {0, 0, 2, 0, 2, 1},
                {0, 0, 2, 1, 0, 1}, {0, 0, 2, 1, 0, 2}, {0, 0, 2, 1, 1, 2}, {0, 0, 2, 1, 2, 1}, {0, 0, 2, 1, 2, 2}, {0, 0, 2, 2, 0, 0}, {0, 0, 2, 2, 0, 2},
                {0, 0, 2, 2, 0, 1}, {0, 0, 2, 2, 1, 1}, {0, 0, 2, 2, 1, 2}, {1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 2}, {1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 2, 0},
                {1, 0, 0, 0, 1, 1}, {1, 0, 0, 0, 1, 2}, {1, 0, 0, 0, 2, 1}, {1, 0, 0, 0, 2, 2}, {1, 0, 0, 1, 0, 0}, {1, 0, 0, 1, 0, 1}, {1, 0, 0, 1, 2, 1},
                {1, 0, 0, 1, 1, 2}, {1, 0, 0, 1, 0, 2}, {1, 0, 0, 1, 2, 2}, {1, 0, 0, 2, 0, 0}, {1, 0, 0, 2, 0, 1}, {1, 0, 0, 2, 0, 2}, {1, 0, 0, 2, 1, 1},
                {1, 0, 0, 2, 1, 2}, {1, 0, 1, 0, 0, 2}, {1, 0, 1, 0, 0, 1}, {1, 0, 1, 0, 1, 0}, {1, 0, 1, 0, 1, 1}, {1, 0, 1, 0, 1, 2}, {1, 0, 1, 0, 2, 0},
                {1, 0, 1, 0, 2, 1}, {1, 0, 1, 1, 0, 0}, {1, 0, 1, 0, 2, 2}, {1, 0, 1, 1, 0, 1}, {1, 0, 1, 1, 0, 2}, {1, 0, 1, 1, 1, 2}, {1, 0, 1, 1, 2, 1},
                {1, 0, 1, 1, 2, 2}, {1, 0, 1, 2, 0, 0}, {1, 0, 1, 2, 0, 1}, {1, 0, 1, 2, 0, 2}, {1, 0, 1, 2, 1, 1}, {1, 0, 1, 2, 1, 2}, {1, 0, 2, 0, 0, 1},
                {1, 0, 2, 0, 0, 2}, {1, 0, 2, 0, 1, 0}, {1, 0, 2, 0, 1, 1}, {1, 0, 2, 0, 2, 0}, {1, 0, 2, 0, 1, 2}, {1, 0, 2, 0, 2, 1}, {1, 0, 2, 1, 0, 0},
                {1, 0, 2, 0, 2, 2}, {1, 0, 2, 1, 0, 1}, {1, 0, 2, 1, 1, 2}, {1, 0, 2, 1, 0, 2}, {1, 0, 2, 1, 2, 1}, {1, 0, 2, 2, 0, 0}, {1, 0, 2, 1, 2, 2},
                {1, 0, 2, 2, 0, 1}, {1, 0, 2, 2, 0, 2}, {1, 0, 2, 2, 1, 1}, {1, 0, 2, 2, 1, 2}, {1, 1, 2, 1, 1, 2}, {1, 1, 2, 1, 2, 1}, {1, 1, 2, 1, 2, 2},
                {1, 1, 2, 2, 1, 1}, {2, 0, 0, 0, 0, 1}, {2, 0, 0, 0, 0, 2}, {1, 1, 2, 2, 1, 2}, {2, 0, 0, 0, 1, 0}, {2, 0, 0, 0, 1, 1}, {2, 0, 0, 0, 1, 2},
                {2, 0, 0, 0, 2, 0}, {2, 0, 0, 0, 2, 1}, {2, 0, 0, 0, 2, 2}, {2, 0, 0, 1, 0, 0}, {2, 0, 0, 1, 0, 1}, {2, 0, 0, 1, 0, 2}, {2, 0, 0, 1, 1, 2},
                {2, 0, 0, 1, 2, 1}, {2, 0, 0, 1, 2, 2}, {2, 0, 0, 2, 0, 0}, {2, 0, 0, 2, 0, 2}, {2, 0, 0, 2, 0, 1}, {2, 0, 0, 2, 1, 1}, {2, 0, 0, 2, 1, 2},
                {2, 0, 1, 0, 0, 1}, {2, 0, 1, 0, 0, 2}, {2, 0, 1, 0, 1, 0}, {2, 0, 1, 0, 1, 1}, {2, 0, 1, 0, 2, 0}, {2, 0, 1, 0, 1, 2}, {2, 0, 1, 0, 2, 1},
                {2, 0, 1, 0, 2, 2}, {2, 0, 1, 1, 0, 0}, {2, 0, 1, 1, 0, 1}, {2, 0, 1, 1, 0, 2}, {2, 0, 1, 1, 1, 2}, {2, 0, 1, 1, 2, 1}, {2, 0, 1, 2, 0, 0},
                {2, 0, 1, 1, 2, 2}, {2, 0, 1, 2, 0, 1}, {2, 0, 1, 2, 0, 2}, {2, 0, 1, 2, 1, 1}, {2, 0, 2, 0, 0, 1}, {2, 0, 2, 0, 0, 2}, {2, 0, 1, 2, 1, 2},
                {2, 0, 2, 0, 1, 0}, {2, 0, 2, 0, 1, 1}, {2, 0, 2, 0, 1, 2}, {2, 0, 2, 0, 2, 0}, {2, 0, 2, 0, 2, 1}, {2, 0, 2, 1, 0, 0}, {2, 0, 2, 0, 2, 2},
                {2, 0, 2, 1, 0, 1}, {2, 0, 2, 1, 1, 2}, {2, 0, 2, 1, 0, 2}, {2, 0, 2, 1, 2, 1}, {2, 0, 2, 1, 2, 2}, {2, 0, 2, 2, 0, 0}, {2, 0, 2, 2, 0, 1},
                {2, 0, 2, 2, 1, 1}, {2, 0, 2, 2, 0, 2}, {2, 1, 1, 1, 1, 2}, {2, 0, 2, 2, 1, 2}, {2, 1, 1, 1, 2, 2}, {2, 1, 1, 2, 1, 1}, {2, 1, 1, 2, 1, 2},
                {2, 1, 1, 1, 2, 1}, {2, 1, 2, 1, 1, 2}, {2, 1, 2, 1, 2, 1}, {2, 1, 2, 2, 1, 1}, {2, 1, 2, 1, 2, 2}, {2, 1, 2, 2, 1, 2}},
                {1.9637194474185395, -0.00077057717353433679, 2.4475827130985569e-05, 0.011004434631244163, 0.002206623370024024, -3.9274388948370791, -0.034257355958190738,
                0.068514711916381477, 1.9637194474185395, 2.3099386354705759e-05, -4.6198772709411519e-05, 2.4475827130985569e-05, -0.0011459392326031756, -0.00077057717353433679,
                -0.034257355958190738, 0.002206623370024024, -0.0011459392326031756, 2.3099386354705759e-05, 0.011004434631244163, -0.034257355958190738, 0.068514711916381477,
                -0.072309992756136324, 0.00016296232264987069, 0.0029783120632393459, -0.034257355958190738, -0.00022182300765178335, 0.036154996378068162, -0.0015258697723161514,
                0.00016296232264987069, 0.0029783120632393459, -0.00030759570510155031, 0.00015379785255077515, 2.3099386354705759e-05, 0.036154996378068162, -0.00022182300765178335,
                -0.0015258697723161514, 0.00015379785255077515, 2.3099386354705759e-05, 1.9637194474185395, -0.034257355958190738, 1.9637194474185395, -0.034257355958190738,
                -4.8951654261971138e-05, -0.0014360461964896868, -0.001436046196489687, -0.022008869262488327, -3.9274388948370791, 2.4475827130985569e-05, 2.3099386354705759e-05,
                2.3099386354705759e-05, 0.0022066233700240236, 0.0022918784652063511, 0.068514711916381477, -0.00077057717353433679, 0.011004434631244163, -4.6198772709411519e-05,
                -0.0011459392326031756, 0.00016296232264987069, 2.4475827130985569e-05, -4.8951654261971138e-05, 1.9629226066399277, -0.039574603589880943, -0.00032592464529974138,
                -0.039554182237388158, 2.4475827130985569e-05, -0.26344605151725092, -3.9258452132798554, 0.079128785827269094, -0.0012135143343385284, 0.0024270286686770568,
                0.011004434631244163, 0.00016296232264987069, 0.079128785827269094, 0.52689210303450185, -0.0012135143343385284, -0.022008869262488327, -0.00077057717353433723,
                0.0029783120632393459, -0.0014360461964896868, -0.039574603589880943, -0.0014524422909231946, 0.00067495794026748617, 0.0008600354784453145, 0.002206623370024024,
                0.005324054749187809, 0.079128785827269094, 3.7324441904852538e-05, -0.001720070956890629, -5.5375961648904622e-05, -0.0015258697723161514, -0.00022324071665053366,
                -0.0015327401380514044, -0.010627688145882823, 1.8051519744052084e-05, 0.00044435486980294191, -2.8401687711148804e-06, 1.4200843855574402e-06, -6.80711749759815e-06,
                1.4200843855574402e-06, -0.034257355958190738, 0.036154996378068162, -6.80711749759815e-06, -0.034257355958190738, -0.00032592464529974138, -0.0014524422909231946,
                0.036154996378068162, -0.0014524422909231946, 0.0004436460153035667, 0.068514711916381477, 0.00016296232264987069, -0.0015258697723161514, 0.00015379785255077515,
                0.00015379785255077515, -4.6198772709411519e-05, -0.072309992756136324, -0.00022182300765178335, 0.0029783120632393459, -0.00030759570510155031, 2.3099386354705759e-05,
                0.002206623370024024, -0.0015258697723161514, -0.0014360461964896868, -0.039554182237388158, -0.0014524422909231946, 0.0008600354784453145, 0.00085778219778391801,
                0.0053036333966950157, -0.00077057717353433712, 0.079128785827269094, -0.0015327401380514044, 1.8051519744052088e-05, -5.5375961648904622e-05, 0.0029783120632393459,
                -0.00022111415315240819, -0.0017200709568906288, -0.010627688145882825, 3.7324441904852538e-05, 0.011004434631244163, -0.00022182300765178329, 0.00044435486980294185,
                -0.022008869262488327, -0.26344605151725092, 0.005324054749187809, 0.00044364601530356659, 0.0053036333966950157, 0.011004434631244163, 0.035419097018628526,
                0.52689210303450185, 0.00016296232264987069, -0.010627688145882823, -0.00032592464529974138, -0.0014833424254411137, -0.00022182300765178329, -0.010627688145882825,
                0.00016296232264987069, -0.070838194037257052, 1.4200843855574402e-06, 0.0029666848508822273, 1.36142349951963e-05, -2.8401687711148804e-06, -6.80711749759815e-06,
                1.4200843855574402e-06, -6.8071174975981508e-06, 1.3614234995196302e-05, -6.8071174975981508e-06, 6.2361503557701404e-05, -0.00012472300711540281}
            };
            test_detail::check_measurement_mat(meas3, ref_3rdm);
        }

        // calculated excited state and measure 3-TDM
        p.erase_regex("MEASURE");
        p.set("n_ortho_states", 1);
        p.set("ortho_states", checkpoint_path.c_str());
        p.erase("chkpfile");
        p.set("MEASURE[trans3rdm]",checkpoint_path.c_str());

        {
            maquis::DMRGInterface<double> interface(p);
            interface.optimize();
            BOOST_CHECK_CLOSE(interface.energy(), -7.28748092964907, 1.0E-7);
            auto&& meas_trans3rdm = interface.measurements().at("transition_threeptdm");

            const rdm_measurement ref_3tdm = {
              {
                {0, 0, 1, 0, 0, 1}, {0, 0, 1, 0, 0, 2}, {0, 0, 1, 0, 1, 0}, {0, 0, 1, 0, 1, 1}, {0, 0, 1, 0, 1, 2}, {0, 0, 1, 0, 2, 0},
                {0, 0, 1, 0, 2, 1}, {0, 0, 1, 0, 2, 2}, {0, 0, 1, 1, 0, 0}, {0, 0, 1, 1, 0, 1}, {0, 0, 1, 1, 0, 2}, {0, 0, 1, 1, 1, 2},
                {0, 0, 1, 1, 2, 1}, {0, 0, 1, 1, 2, 2}, {0, 0, 1, 2, 0, 0}, {0, 0, 1, 2, 0, 1}, {0, 0, 1, 2, 0, 2}, {0, 0, 1, 2, 1, 1},
                {0, 0, 1, 2, 1, 2}, {0, 0, 2, 0, 0, 1}, {0, 0, 2, 0, 0, 2}, {0, 0, 2, 0, 1, 0}, {0, 0, 2, 0, 1, 1}, {0, 0, 2, 0, 1, 2},
                {0, 0, 2, 0, 2, 0}, {0, 0, 2, 0, 2, 1}, {0, 0, 2, 0, 2, 2}, {0, 0, 2, 1, 0, 0}, {0, 0, 2, 1, 0, 1}, {0, 0, 2, 1, 0, 2},
                {0, 0, 2, 1, 1, 2}, {0, 0, 2, 1, 2, 1}, {0, 0, 2, 1, 2, 2}, {0, 0, 2, 2, 0, 0}, {0, 0, 2, 2, 0, 1}, {0, 0, 2, 2, 0, 2},
                {0, 0, 2, 2, 1, 1}, {0, 0, 2, 2, 1, 2}, {1, 0, 0, 0, 0, 1}, {1, 0, 0, 0, 0, 2}, {1, 0, 0, 0, 1, 0}, {1, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 1, 2}, {1, 0, 0, 0, 2, 0}, {1, 0, 0, 0, 2, 1}, {1, 0, 0, 0, 2, 2}, {1, 0, 0, 1, 0, 0}, {1, 0, 0, 1, 0, 1},
                {1, 0, 0, 1, 0, 2}, {1, 0, 0, 1, 1, 2}, {1, 0, 0, 1, 2, 1}, {1, 0, 0, 1, 2, 2}, {1, 0, 0, 2, 0, 0}, {1, 0, 0, 2, 0, 1},
                {1, 0, 0, 2, 0, 2}, {1, 0, 0, 2, 1, 1}, {1, 0, 0, 2, 1, 2}, {1, 0, 1, 0, 0, 1}, {1, 0, 1, 0, 0, 2}, {1, 0, 1, 0, 1, 0},
                {1, 0, 1, 0, 1, 1}, {1, 0, 1, 0, 1, 2}, {1, 0, 1, 0, 2, 0}, {1, 0, 1, 0, 2, 1}, {1, 0, 1, 0, 2, 2}, {1, 0, 1, 1, 0, 0},
                {1, 0, 1, 1, 0, 1}, {1, 0, 1, 1, 0, 2}, {1, 0, 1, 1, 1, 2}, {1, 0, 1, 1, 2, 1}, {1, 0, 1, 1, 2, 2}, {1, 0, 1, 2, 0, 0},
                {1, 0, 1, 2, 0, 1}, {1, 0, 1, 2, 0, 2}, {1, 0, 1, 2, 1, 1}, {1, 0, 1, 2, 1, 2}, {1, 0, 2, 0, 0, 1}, {1, 0, 2, 0, 0, 2},
                {1, 0, 2, 0, 1, 0}, {1, 0, 2, 0, 1, 1}, {1, 0, 2, 0, 1, 2}, {1, 0, 2, 0, 2, 0}, {1, 0, 2, 0, 2, 1}, {1, 0, 2, 0, 2, 2},
                {1, 0, 2, 1, 0, 0}, {1, 0, 2, 1, 0, 1}, {1, 0, 2, 1, 0, 2}, {1, 0, 2, 1, 1, 2}, {1, 0, 2, 1, 2, 1}, {1, 0, 2, 1, 2, 2},
                {1, 0, 2, 2, 0, 0}, {1, 0, 2, 2, 0, 1}, {1, 0, 2, 2, 0, 2}, {1, 0, 2, 2, 1, 1}, {1, 0, 2, 2, 1, 2}, {1, 1, 2, 0, 0, 1},
                {1, 1, 2, 0, 0, 2}, {1, 1, 2, 0, 1, 0}, {1, 1, 2, 0, 1, 1}, {1, 1, 2, 0, 1, 2}, {1, 1, 2, 0, 2, 0}, {1, 1, 2, 0, 2, 1},
                {1, 1, 2, 0, 2, 2}, {1, 1, 2, 1, 0, 0}, {1, 1, 2, 1, 0, 1}, {1, 1, 2, 1, 0, 2}, {1, 1, 2, 1, 1, 2}, {1, 1, 2, 1, 2, 1},
                {1, 1, 2, 1, 2, 2}, {1, 1, 2, 2, 0, 0}, {1, 1, 2, 2, 0, 1}, {1, 1, 2, 2, 0, 2}, {1, 1, 2, 2, 1, 1}, {1, 1, 2, 2, 1, 2},
                {2, 0, 0, 0, 0, 1}, {2, 0, 0, 0, 0, 2}, {2, 0, 0, 0, 1, 0}, {2, 0, 0, 0, 1, 1}, {2, 0, 0, 0, 1, 2}, {2, 0, 0, 0, 2, 0},
                {2, 0, 0, 0, 2, 1}, {2, 0, 0, 0, 2, 2}, {2, 0, 0, 1, 0, 0}, {2, 0, 0, 1, 0, 1}, {2, 0, 0, 1, 0, 2}, {2, 0, 0, 1, 1, 2},
                {2, 0, 0, 1, 2, 1}, {2, 0, 0, 1, 2, 2}, {2, 0, 0, 2, 0, 0}, {2, 0, 0, 2, 0, 1}, {2, 0, 0, 2, 0, 2}, {2, 0, 0, 2, 1, 1},
                {2, 0, 0, 2, 1, 2}, {2, 0, 1, 0, 0, 1}, {2, 0, 1, 0, 0, 2}, {2, 0, 1, 0, 1, 0}, {2, 0, 1, 0, 1, 1}, {2, 0, 1, 0, 1, 2},
                {2, 0, 1, 0, 2, 0}, {2, 0, 1, 0, 2, 1}, {2, 0, 1, 0, 2, 2}, {2, 0, 1, 1, 0, 0}, {2, 0, 1, 1, 0, 1}, {2, 0, 1, 1, 0, 2},
                {2, 0, 1, 1, 1, 2}, {2, 0, 1, 1, 2, 1}, {2, 0, 1, 1, 2, 2}, {2, 0, 1, 2, 0, 0}, {2, 0, 1, 2, 0, 1}, {2, 0, 1, 2, 0, 2},
                {2, 0, 1, 2, 1, 1}, {2, 0, 1, 2, 1, 2}, {2, 0, 2, 0, 0, 1}, {2, 0, 2, 0, 0, 2}, {2, 0, 2, 0, 1, 0}, {2, 0, 2, 0, 1, 1},
                {2, 0, 2, 0, 1, 2}, {2, 0, 2, 0, 2, 0}, {2, 0, 2, 0, 2, 1}, {2, 0, 2, 0, 2, 2}, {2, 0, 2, 1, 0, 0}, {2, 0, 2, 1, 0, 1},
                {2, 0, 2, 1, 0, 2}, {2, 0, 2, 1, 1, 2}, {2, 0, 2, 1, 2, 1}, {2, 0, 2, 1, 2, 2}, {2, 0, 2, 2, 0, 0}, {2, 0, 2, 2, 0, 1},
                {2, 0, 2, 2, 0, 2}, {2, 0, 2, 2, 1, 1}, {2, 0, 2, 2, 1, 2}, {2, 1, 1, 0, 0, 1}, {2, 1, 1, 0, 0, 2}, {2, 1, 1, 0, 1, 0},
                {2, 1, 1, 0, 1, 1}, {2, 1, 1, 0, 1, 2}, {2, 1, 1, 0, 2, 0}, {2, 1, 1, 0, 2, 1}, {2, 1, 1, 0, 2, 2}, {2, 1, 1, 1, 0, 0},
                {2, 1, 1, 1, 0, 1}, {2, 1, 1, 1, 0, 2}, {2, 1, 1, 1, 1, 2}, {2, 1, 1, 1, 2, 1}, {2, 1, 1, 1, 2, 2}, {2, 1, 1, 2, 0, 0},
                {2, 1, 1, 2, 0, 1}, {2, 1, 1, 2, 0, 2}, {2, 1, 1, 2, 1, 1}, {2, 1, 1, 2, 1, 2}, {2, 1, 2, 0, 0, 1}, {2, 1, 2, 0, 0, 2},
                {2, 1, 2, 0, 1, 0}, {2, 1, 2, 0, 1, 1}, {2, 1, 2, 0, 1, 2}, {2, 1, 2, 0, 2, 0}, {2, 1, 2, 0, 2, 1}, {2, 1, 2, 0, 2, 2},
                {2, 1, 2, 1, 0, 0}, {2, 1, 2, 1, 0, 1}, {2, 1, 2, 1, 0, 2}, {2, 1, 2, 1, 1, 2}, {2, 1, 2, 1, 2, 1}, {2, 1, 2, 1, 2, 2},
                {2, 1, 2, 2, 0, 0}, {2, 1, 2, 2, 0, 1}, {2, 1, 2, 2, 0, 2}, {2, 1, 2, 2, 1, 1}, {2, 1, 2, 2, 1, 2}
              },
                std::vector<double> {
                    0.056218633997301731, 2.8008672898248794, -0.028109316998650866, -0.00022842358967392853, 0.011649790691926887,
                   -1.4004336449124397, -0.022822720463907781, 0.007885543339697855, -0.028109316998650866, -0.00022842358967392853,
                    0.011649790691926887, -0.00019365173051258969, 9.6825865256294845e-05, -0.0048034417894974295, -1.4004336449124397,
                   -0.022822720463907785, 0.007885543339697855, 9.6825865256294845e-05, -0.0048034417894974295, -0.37817104736117835,
                   -0.056064234092717727, 0.18908552368058917, -0.0015208654041424072, 0.0018882325075025358, 0.028032117046358863,
                   -0.00060148086924037515, -0.00015895363998199785, 0.18908552368058917, -0.0015208654041424072, 0.001888232507502536,
                   -0.0012893511471793562, 0.00064467557358967808, 9.6825865256294845e-05, 0.028032117046358863, -0.00060148086924037515,
                   -0.00015895363998199785, 0.00064467557358967808, 9.6825865256294845e-05, -0.028109316998650866, -1.4004336449124397,
                   -0.028109316998650866, 0.00045684717934785707, 0.011172929771980894, -1.4004336449124397, 0.011172929771980894,
                   -0.01577108667939571, 0.056218633997301731, -0.00022842358967392853, -0.022822720463907781, 9.6825865256294845e-05,
                    9.6825865256294845e-05, 0.0096068835789948591, 2.8008672898248794, 0.011649790691926887, 0.007885543339697855,
                   -0.00019365173051258969, -0.0048034417894974295, 0.00086626124968120757, -9.0645605817502927e-07, -0.0017325224993624151,
                   -0.056345114534936784, -1.4004089841348117, 1.8129121163500585e-06, -1.4003943506288179, 0.0014653833200036421,
                    0.00086626124968120757, 0.11269022906987357, 2.8008033347636294, 0.0113348547225072, -0.0226697094450144,
                    0.007885543339697855, -9.0645605817502927e-07, 2.8008033347636294, -0.0029307666400072842, 0.0113348547225072,
                   -0.01577108667939571, 0.01573660094326015, 0.00084983093187805051, -0.0078160260778623175, 0.0011991693049403672,
                    0.028133363115331784, 0.0008744764085827861, 0.028265985734976615, -1.978294229641129e-05, -0.0079205748653978329,
                   -0.0022077538906213278, -0.056531971469953216, -0.00017456595797233929, 0.00042991836349706242, -0.00016489626107061544,
                   -0.0017243073404608366, -0.056420377862094778, 5.4199390586844213e-05, -0.00025535240552472315, 0.0003208785905083045,
                   -0.0016350910785088307, 1.710959845344246e-06, 0.00081754553925441535, 2.8234126286686493e-05, 0.00087546829320952558,
                   -8.5547992267212299e-07, 0.00086165772791704852, -9.0645605817502927e-07, 0.00081754553925441535, 2.8234126286686493e-05,
                    0.00087546829320952568, 8.4109137514302629e-06, -4.2054568757151315e-06, -4.8778353313405467e-06, -8.5547992267212299e-07,
                    0.00086165772791704852, -9.0645605817502927e-07, -4.2054568757151315e-06, -4.8778353313405467e-06, 0.18908552368058917,
                    0.028032117046358863, 0.18908552368058917, 0.0030417308082848144, -0.0012867516382621608, 0.028032117046358863,
                   -0.0012867516382621606, 0.0003179072799639957, -0.37817104736117835, -0.0015208654041424072, -0.00060148086924037515,
                    0.00064467557358967808, 0.00064467557358967808, -0.00019365173051258969, -0.056064234092717727, 0.0018882325075025358,
                   -0.00015895363998199785, -0.0012893511471793562, 9.6825865256294845e-05, -0.0079205748653978329, -0.0017243073404608366,
                   -0.0078160260778623175, 0.0010085845856809606, 0.028265985734976615, 0.0008744764085827861, 0.028287014746762981,
                   -3.441644829043293e-05, 0.01573660094326015, -0.0022077538906213278, -0.056420377862094778, -0.00025535240552472315,
                    0.00042991836349706247, -0.00015598232943768905, 0.00084983093187805051, -0.056531971469953216, 5.419939058684422e-05,
                   -0.00017456595797233927, 0.0003208785905083045, -0.00031583987435670303, -0.0078508756737074893, 0.00063167974871340606,
                    0.0075612033329490423, 0.18782282613589568, 0.015701751347414979, 0.18801341085515508, -0.00015246327944999096,
                   -0.00031583987435670303, -0.015122406665898085, -0.37583623699105073, -0.0015208654041424072, 0.0030417308082848144,
                   -0.0010852568644390268, -0.0078508756737074893, -0.37583623699105073, 0.00030492655889998192, -0.0015208654041424072,
                    0.0021705137288780536, 0.00081754553925441535, -8.5547992267212299e-07, 0.00081754553925441535, -5.6468252573372985e-05,
                   -0.0017371260211265743, -8.5547992267212299e-07, -0.0017371260211265743, 1.8129121163500585e-06, -0.0016350910785088307,
                    2.8234126286686493e-05, 0.00086165772791704863, -4.2054568757151315e-06, -4.2054568757151315e-06, 9.7556706626810934e-06,
                    1.710959845344246e-06, 0.00087546829320952558, -9.0645605817502927e-07, 8.4109137514302629e-06, -4.8778353313405467e-06,
                    3.2889768113861764e-05, 0.00081754553925441535, -6.5779536227723528e-05, -0.00031583987435670303, -0.0078376447345905199,
                   -0.0016350910785088307, -0.0078574911432659732, 3.6116371374194971e-06, 3.2889768113861764e-05, 0.00063167974871340606,
                    0.015695135877856495, 6.3528239753135536e-05, -0.00012705647950627107, 4.7011753601351394e-05, 0.00081754553925441535,
                    0.015695135877856491, -7.2232742748389942e-06, 6.3528239753135536e-05, -9.4023507202702788e-05
                }
            };

            test_detail::check_measurement_mat(meas_trans3rdm, ref_3tdm, true);
        }
        boost::filesystem::remove_all(checkpoint_path);
    }


}

