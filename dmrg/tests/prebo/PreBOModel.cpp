/**
 * @file
 * @copyright This code is licensed under the 3-clause BSD license.
 *            Copyright ETH Zurich, Laboratory of Physical Chemistry, Reiher Group.
 *            See LICENSE.txt for details.
 */

#define BOOST_TEST_MODULE model_prebo

#include <boost/test/included/unit_test.hpp>
#include <boost/mpl/assert.hpp>
#include "utils/fpcomparison.h"
#include "utils/io.hpp"
#include "dmrg/models/lattice/lattice.h"
#include "dmrg/models/prebo/nu1/model.hpp"
#include "dmrg/sim/matrix_types.h"
#include "maquis_dmrg.h"
#include <iostream>

/** 
 * @brief Fixture class that contains all data that are globally used by the tests 
 * 
 * So far, our reference data are obtained for H2, at a bond distance of d=3 Angstrom,
 * for the singlet state, 6-31G* basis set.
 * The integrals are generated by Blueberry.
 */
struct PreBOModelUnitTestFixture {
  // Types 
  using IntegralMapType = maquis::integral_map<double, chem::Hamiltonian::PreBO>;
  using ModelType = PreBO<tmatrix<double>, 2>;

  /** @brief Class constructor */
  explicit PreBOModelUnitTestFixture(bool useBinary=true) {
     // Generates the integral file
     integralsForH2 = IntegralMapType{{{-1,-1,-1,-1,-1,-1,-1,-1},0.1763923530387111}};
     // Sets the parameters
     if (useBinary)
         parametersForH2.set("integrals_binary", maquis::serialize(integralsForH2));
     else
         parametersForH2.set("integral_file", "integral_file_test");
     parametersForH2.set("L", 4);
     parametersForH2.set("LATTICE", "preBO lattice");
     parametersForH2.set("MODEL", "PreBO");
     parametersForH2.set("max_bond_dimension", 1000);
     parametersForH2.set("PreBO_ParticleTypeVector", "2");
     parametersForH2.set("PreBO_FermionOrBosonVector", "1");
     parametersForH2.set("PreBO_OrbitalVector", "4");
     parametersForH2.set("PreBO_InitialStateVector", "1 1" );
     parametersForH2.set("symmetry", "nu1");
  }
  
  /** @brief Default destructor */
  ~PreBOModelUnitTestFixture() {
      BOOST_TEST_MESSAGE( "PreBO model test completed" );
  }

  static DmrgParameters parametersForH2;
  static IntegralMapType integralsForH2;
};

// Definition of static variables
typename PreBOModelUnitTestFixture::IntegralMapType PreBOModelUnitTestFixture::integralsForH2;
DmrgParameters PreBOModelUnitTestFixture::parametersForH2;

// Defines the fixture
BOOST_TEST_GLOBAL_FIXTURE( PreBOModelUnitTestFixture );

/** Checks consistency for the physical dimensions */
BOOST_AUTO_TEST_CASE( PreBO_Test_Phys )
{
    auto preBOModel = PreBO<tmatrix<double>, 2>(lattice_factory(PreBOModelUnitTestFixture::parametersForH2),
                                                                PreBOModelUnitTestFixture::parametersForH2, false);
    preBOModel.create_terms();
    const auto& physicalDimensions0 = preBOModel.phys_dim(0);
    BOOST_CHECK_EQUAL(physicalDimensions0.sum_of_sizes(), 4);
}

/** Checks consistency for the total QN vector */
BOOST_AUTO_TEST_CASE( PreBO_Test_QN )
{
    auto preBOModel = PreBO<tmatrix<double>, 2>(lattice_factory(PreBOModelUnitTestFixture::parametersForH2),
                                                                PreBOModelUnitTestFixture::parametersForH2, false);
    auto qn = preBOModel.total_quantum_numbers(PreBOModelUnitTestFixture::parametersForH2);
    BOOST_CHECK_EQUAL(qn[0], 1);
    BOOST_CHECK_EQUAL(qn[1], 1);
}

/** Simple check on tags */
BOOST_AUTO_TEST_CASE( PreBO_Test_Tags )
{
    auto preBOModel = PreBO<tmatrix<double>, 2>(lattice_factory(PreBOModelUnitTestFixture::parametersForH2),
                                                                PreBOModelUnitTestFixture::parametersForH2, false);
    auto identityTag = preBOModel.identity_matrix_tag(0);
    auto fillingTag = preBOModel.filling_matrix_tag(0);
    BOOST_CHECK(identityTag != fillingTag);
}

/** Checks that the number of terms that are created are consistent with the input data */
BOOST_AUTO_TEST_CASE( PreBO_Test_Terms )
{
    auto preBOModel = PreBO<tmatrix<double>, 2>(lattice_factory(PreBOModelUnitTestFixture::parametersForH2),
                                                                PreBOModelUnitTestFixture::parametersForH2, false);
    BOOST_CHECK_EQUAL(preBOModel.hamiltonian_terms().size(), 0);
    preBOModel.create_terms();
    BOOST_CHECK_EQUAL(preBOModel.hamiltonian_terms().size(), 1);
}

/** Test for the integral parser */
BOOST_AUTO_TEST_CASE( PreBO_Test_Parser )
{

    auto unitTest = PreBOModelUnitTestFixture(false);
    auto parms = unitTest.parametersForH2;
    std::ofstream integralfile;
    integralfile.open ("integral_file_test");
    integralfile << "                     1.145901278714102\n1-0         1-0                      2.30233235666604\n0-0         0-0         0-0         0-0                       0.310230908236689";
    integralfile.close();

    auto integrals = prebo::detail::parse_integrals<double>(parms, lattice_factory(parms));

    BOOST_CHECK_CLOSE(1.145901278714102, integrals.second[0], 1e-12);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][0]);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][1]);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][2]);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][3]);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][4]);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][5]);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][6]);
    BOOST_CHECK_EQUAL(-1, integrals.first[0][7]);

    BOOST_CHECK_CLOSE(2.30233235666604, integrals.second[1], 1e-12);
    BOOST_CHECK_EQUAL(1, integrals.first[1][0]);
    BOOST_CHECK_EQUAL(0, integrals.first[1][1]);
    BOOST_CHECK_EQUAL(1, integrals.first[1][2]);
    BOOST_CHECK_EQUAL(0, integrals.first[1][3]);
    BOOST_CHECK_EQUAL(-1, integrals.first[1][4]);
    BOOST_CHECK_EQUAL(-1, integrals.first[1][5]);
    BOOST_CHECK_EQUAL(-1, integrals.first[1][6]);
    BOOST_CHECK_EQUAL(-1, integrals.first[1][7]);

    BOOST_CHECK_CLOSE(0.310230908236689, integrals.second[2], 1e-12);
    BOOST_CHECK_EQUAL(0, integrals.first[2][0]);
    BOOST_CHECK_EQUAL(0, integrals.first[2][1]);
    BOOST_CHECK_EQUAL(0, integrals.first[2][2]);
    BOOST_CHECK_EQUAL(0, integrals.first[2][3]);
    BOOST_CHECK_EQUAL(0, integrals.first[2][4]);
    BOOST_CHECK_EQUAL(0, integrals.first[2][5]);
    BOOST_CHECK_EQUAL(0, integrals.first[2][6]);
    BOOST_CHECK_EQUAL(0, integrals.first[2][7]);

    std::remove("integral_file_test");
}

